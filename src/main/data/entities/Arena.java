package main.data.entities;

import java.awt.Point;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class Arena implements Serializable
{
	private static final long serialVersionUID = 5167275044740085358L;
	
	public static final int TILE_WALL = 0;
	public static final int TILE_FLOOR = 1;
	public static final int TILE_GOAL = 2;
	public static final int TILE_TELE = 3;
	public static final int TILE_PAD = 4;
	public static final int TILE_BIN = 5;
	public static final int TILE_SHOCK = 6;
	
	public static final int STATE_UNTRIED = 0;
	public static final int STATE_FAILED = 1;
	public static final int STATE_SUCCESS = 2;
	
	public static final int ARENA_BRIDGES = 0;
	public static final int ARENA_JACKALS_LAIR = 1;
	public static final int ARENA_CRISSICK = 2;
	public static final int ARENA_WHIRLWIND = 3;
	public static final int ARENA_THE_VOID = 4;
	public static final int ARENA_OBSERVATORY = 5;
	public static final int ARENA_ABYSS = 6;
	public static final int ARENA_GADEL_SPYRE = 7;
	public static final int ARENA_FULCRUM = 8;
	public static final int ARENA_SAVANNA = 9;
	public static final int ARENA_BARROW = 10;
	public static final int ARENA_MAELSTROM = 11;
	public static final int ARENA_VAULT = 12;
	public static final int ARENA_NEXUS = 13;
	public static final int ARENA_DARKSUN = 14;
	public static final int ARENA_BADLANDS = 15;
	public static final int ARENA_LIGHTWAY = 16;
	public static final int ARENA_EYES = 17;
	public static final int ARENA_DARKSTAR = 18;
	public static final int ARENA_SPACECOM = 19;
	
	private static boolean ballFound = false;
	
	private static boolean arenasDefined = false;
	private static List<Arena> arenas = new ArrayList<Arena>();
	
	int[][] tiles = new int[30][30];
	List<Point> portals = new ArrayList<Point>();
	List<Point> ballPads = new ArrayList<Point>();
	List<Point> ballBins = new ArrayList<Point>();
	List<Integer> binState = new ArrayList<Integer>();
	
	public Arena()
	{
		initializeArena
	}
	
	@Override
	public Arena clone()
	{
		Arena toRet = null;
		
		try {
			toRet = new Arena();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		toRet.portals.clear();
		
		for (int i = 0; i < portals.size(); i++)
		{
			Point p = new Point(portals.get(i).x, portals.get(i).y);
			toRet.portals.add(p);
		}
		
		for (int i = 0; i < 30; i++)
		{
			for (int j = 0; j < 30; j++)
			{
				toRet.tiles[i][j] = tiles[i][j];
			}
		}
		
		return toRet;
	}
	
	public Arena(String arenaAsString) throws IllegalArgumentException
	{
		if (arenaAsString.length() != 900)
			throw new IllegalArgumentException("Invalid map string passed into Field constructor!");
		
		initializeArena(arenaAsString);
	}
	
	public void initializeArena(String arenaAsString)
	{
		int index = 0;
		
		for (int i = 0; i < 30; i++)
		{
			for (int j = 0; j < 30; j++)
			{
				tiles[i][j] = Integer.parseInt(arenaAsString.substring(index, index + 1));				
				index++;
			}
		}
		
		//scan for special features
		for (int i = 0; i < 30; i++)
		{
			for (int j = 0; j < 30; j++)
			{
				if (tiles[i][j] == TILE_TELE)
				{
					portals.add(new Point(i, j));
				}
				
				if (tiles[i][j] == TILE_PAD)
				{
					ballPads.add(new Point(i, j));
					
					//find the associated bin (for graphics purposes); note that this won't work for all maps
					for (int k = -1; k <= 1; k++)
					{
						for (int l = -1; l <= 1; l++)
						{
							//System.out.print(tiles[i+k][j+l]);
							if (tiles[i + k][j + l] == TILE_BIN)
							{
								ballBins.add(new Point(i + k, j + l));
								binState.add(STATE_UNTRIED);
							}
						}
						//System.out.println();
					}
					//System.out.println();
				}
			}
		}
		
		//System.out.println(ballBins.size() + " " + ballBins);
		//System.out.println(ballPads.size() + " " + ballPads);
	}
	
	public int getTile(int x, int y)
	{
		return tiles[x][y];
	}
	
	public int getTile(Point p)
	{
		return tiles[p.x][p.y];
	}
	
	public Point getPortal(int index)
	{
		return (Point)portals.get(index).clone();
	}
	
	public int getBinIndex(int x, int y)
	{
		int binIndex = -1;
		
		//assumes exactly 8 ball bins
		for (int i = 0; i < 8; i++)
		{
			Point toCheck = (Point)ballBins.get(i).clone();
			
			if (toCheck.x == x && toCheck.y == y)
			{
				binIndex = i;
				break;
			}
		}
		
		return binIndex;
	}
	
	public int getPadIndex(int x, int y)
	{
		int padIndex = -1;
		
		//assumes exactly 8 ball bins
		for (int i = 0; i < 8; i++)
		{
			Point toCheck = (Point)ballPads.get(i).clone();
			
			if (toCheck.x == x && toCheck.y == y)
			{
				padIndex = i;
				break;
			}
		}
		
		return padIndex;
	}
	
	public int getBinStatus(int index)
	{
		if (index >= 0 && index < 8)
			return binState.get(index);
		
		return -1;
	}
	
	public void setBinStatus(int index, int state)
	{
		if (index >= 0 && index < 8)
			binState.set(index, state);
	}
	
	public int getUntriedBinCount()
	{
		int count = 0;
		
		for (int i = 0; i < 8; i++)
		{
			if (getBinStatus(i) == STATE_UNTRIED)
				count++;
		}
		
		return count;
	}
	
	public boolean isObstructed(int x, int y)
	{
		//out of bounds is obviously obstructed
		if (x < 0 || y < 0 || x > 29 || y > 29)
			return true;
		
		int tile = tiles[x][y];
		
		if (tile == TILE_FLOOR || tile == TILE_GOAL || tile == TILE_PAD || tile == TILE_SHOCK || tile == TILE_TELE)
			return false;
		
		return true;
	}
	
	public void ballFound(int binIndex)
	{
		ballFound = true;
		
		//turn off all bins but the correct one
		for (int i = 0; i < 8; i++)
		{
			if (i == binIndex)
			{
				setBinStatus(i, Arena.STATE_SUCCESS);
			}
			else
			{
				setBinStatus(i, Arena.STATE_FAILED);
			}
		}
		
		//clear out three of the goals
		Point p = ballPads.get(binIndex);
		
		int x = p.x;
		int y = p.y;
		
		if (x > 14)	//bottom
		{
			clearQuadrant(3);
			clearQuadrant(4);
		}
		if (x < 15)	//top
		{
			clearQuadrant(2);
			clearQuadrant(1);
		}
		if (y > 14)	//right
		{
			clearQuadrant(1);
			clearQuadrant(4);
		}
		if (y < 15)	//left
		{
			clearQuadrant(2);
			clearQuadrant(3);
		}
	}
	
	//quadNum is based on the Cartesian plane numbering
	//21
	//34
	private void clearQuadrant(int quadNum)
	{
		int xMin = 1;
		int yMin = 1;

		if (quadNum == 1 || quadNum == 4)
			yMin = 25;
		if (quadNum == 3 || quadNum == 4)
			xMin = 25;
			
		for (int i = xMin; i <= xMin + 3; i++)
		{
			for (int j = yMin; j <= yMin + 3; j++)
			{
				tiles[i][j] = TILE_FLOOR;
			}
		}
	}
	
	public static Arena generateArena(int arenaNumber)
	{
		if(!arenasDefined)
			defineArenas();
		
		if (arenaNumber < 0 || arenaNumber > 19)
			throw new IndexOutOfBoundsException("Invalid arena number specified: " + arenaNumber);
		
		return arenas.get(arenaNumber);
	}
	
	private static void defineArenas()
	{
		arenasDefined = true;
		
		try
		{
			arenas.add(new Arena
			arenas.add(new Arena("000000000000000000000000000000022221111003111111300111122220022221111006661166600111122220022221111111111111111111122220022221111111111111111111122220011111111111111111111111111110011111111111111111111111111110011111111006611116600111111110011111113001611116100311111110000111100000011110000001111000000111100000011110000001111000000111100005111111500001111000000541100004111111400001145000000111100001111101100001111000000111100001111001100001111000000111100001111011100001111000000111100001100011100001111000000111100004111111400001145000000541100005111111500001111000000111100000000000000001111000000111100000000000000001111000011111113001111111100311111110011111111006661166600111111110011111111111111111111111111110011111111111111111111111111110022221111111111111111111122220022221111111111111111111122220022221111006661166600111122220022221111003111111300111122220000000000000000000000000000000"));
			arenas.add(new Arena
			arenas.add(new Arena
			
			arenas.add(new Arena
			arenas.add(new Arena("000000000000000000000000000000022221115000000000000511122220022221114000000000000411122220022221111111111111111111122220022221111111111111111111122220011111111111111111111111111110011111111111111111111111111110011111111000031130000111111110054111111000011110000111111450000111100000011110000001111000000111100000011110000001111000000111100000011110000001111000000111100000011110000001111000000111111111111111111111111000000111111111111111111111111000000311111111111111111111113000000111111111311113111111111000000111100000000000000001111000000111100000000000000001111000000111100000000000000001111000000111100000000000000001111000054111111000000000000111111450011111111000000000000111111110011111111111113111111111111110011111111111111111111111111110022221111111111111111111122220022221111111111311111111122220022221114000000000000411122220022221115000000000000511122220000000000000000000000000000000"));
			arenas.add(new Arena
			arenas.add(new Arena("000000000000000000000000000000022221115003111111100511122220022221114001111111100411122220022221111001111111111111122220022221111001111111111111122220011111111001111111111111111110011111111001111111111111111110011111111001111111100111111110011111111003111111100111111450000111100000011110000001111000000111100000011110000001111000000111100003111111500001111000000111100001111111400001111000000111161111111111111161111000000111161111111111111161113000000311161111111111111161111000000111161111111111111161111000000111100004111111100001111000000111100005111111300001111000000111100000011110000001111000000111100000011110000001111000054111111001111111300111111110011111111001111111100111111110011111111111111111100111111110011111111111111111100111111110022221111111111111100111122220022221111111111111100111122220022221111001111111100411122220022221145001111111300511122220000000000000000000000000000000"));//gadel spyre
			
			arenas.add(new Arena());
			arenas.add(new Arena("000000000000000000000000000000022221111005111111500111122220022221111004111111400111122220022221111111111111111111122220022221111111111111111111122220011111111111111111111111111110011111111111111111111111111110011111111001111111100111111110011111111003111111300111111110000111100000011110000001111000000111100000011110000001111000054111113001111111100311111450011111111001111111100111111110011111111111111111111111111110011111111111111111111111111110011111111111111111111111111110011111111111111111111111111110011111111001111111100111111110054111113001111111100311111450000111100000011110000001111000000111100000011110000001111000011111111003111111300111111110011111111001111111100111111110011111111111111111111111111110011111111111111111111111111110022221111111111111111111122220022221111111111111111111122220022221111004111111400111122220022221111005111111500111122220000000000000000000000000000000"));//savanna
			arenas.add(new Arena());
			arenas.add(new Arena
			
			arenas.add(new Arena());
			arenas.add(new Arena());
			arenas.add(new Arena());
			arenas.add(new Arena());
			
			arenas.add(new Arena());
			arenas.add(new Arena());
			arenas.add(new Arena());
			arenas.add(new Arena());
		}
		catch(IllegalArgumentException e)
		{
			System.out.print("ERROR: Arena definition failed! Check intialization strings.");
		}
	}
	
	public boolean isBallFound()
	{
		return ballFound;
	}
}
